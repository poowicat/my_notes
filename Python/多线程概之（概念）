#### 定义

- 多线程类似于同时执行多个不同程序

#### 优点

- 可把占据时间长的程序中的任务放到后台去处理；
- 用户界面更吸引人，如用户点击某个按钮触发某些事件的处理，可以弹出一个进度条来显示处理进度；
- 程序运行速度加快
- 一些等待任务实现上如文件读写，需要耗费大量内存的情况下，线程可以释放一些内存占用的资源；

#### 细分

- 每个独立线程都有一个程序运行入口、顺序执行序列和程序的出口。
- 线程不能独立执行，必须依赖于应用程序中，应用程序提供多个线程执行控制；
- 每个线程都有一组CPU寄存器（也称上下文），该反应了线程上次运行该线程的CPU寄存器状态；
- 其两重要的寄存器分为：
  - 指令指针
  - 堆栈指针
- 线程总是在进程得到上下文中 运行的
- 这些地址用于标志拥有线程的进程地址空间中的内存
- 线程可以被抢占（中断）

#### 进程与线程

- 线程共享进程中的数据，使用相同的地址空间，使用线程创建快捷键，创建开销比进程小，同一进程下的线程共享全局变量、静态变量等数据，所以线程通讯非常方便
- 但会存在数据同步与互斥的问题，如何处理好同步与互斥是编写多线程程序的难点
- 一个进程可存在多个线程
- 单核CPU中每个进程中同时刻只能运行一个线程
- 只有在多cpu中才能存在线程并发的情况
- 当线程没有运行空间时，需要判断优先级

#### 全局解锁器（GIL)

- 

